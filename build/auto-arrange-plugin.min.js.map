{"version":3,"file":"auto-arrange-plugin.min.js","sources":["../src/auto-arrange.js","../src/index.js"],"sourcesContent":["export class AutoArrange {\r\n  constructor(editor, margin, depth) {\r\n    this.editor = editor;\r\n    this.margin = margin;\r\n    this.depth = depth;\r\n  }\r\n\r\n  getNodes(node, type = 'output') {\r\n    const nodes = [];\r\n    const key = `${type}s`;\r\n\r\n    for (let io of node[key].values())\r\n      for (let connection of io.connections.values())\r\n        nodes.push(connection[type === 'input' ? 'output' : 'input'].node);\r\n\r\n    return nodes;\r\n  }\r\n\r\n  getNodesTable(node, cols = [], depth = 0) {\r\n    if (this.depth && depth > this.depth) return;\r\n    if (!cols[depth]) cols[depth] = [];\r\n    if (cols[depth].includes(node)) return;\r\n\r\n    cols[depth].push(node);\r\n\r\n    this.getNodes(node, 'output').map(n =>\r\n      this.getNodesTable(n, cols, depth + 1)\r\n    );\r\n    this.getNodes(node, 'input').map(n =>\r\n      this.getNodesTable(n, cols, depth - 1)\r\n    );\r\n\r\n    return cols;\r\n  }\r\n\r\n  nodeSize(node) {\r\n    const el = this.editor.view.nodes.get(node).el;\r\n\r\n    return {\r\n      width: el.clientWidth,\r\n      height: el.clientHeight\r\n    };\r\n  }\r\n\r\n  arrange(node = this.editor.nodes[0]) {\r\n    var completePaths = [...this.editor.nodes];\r\n\r\n    console.log('Todos los nodos');\r\n    console.log(completePaths);\r\n\r\n    var counter = 0;\r\n    var maximumHeight = 0;\r\n    var heightOffset = 0;\r\n    while (completePaths.length > 0) {\r\n      counter = counter + 1;\r\n      console.log('Camino: ' + counter);\r\n      const table = this.getNodesTable(completePaths[0]);\r\n      // completePaths = completePaths.filter(x => !table[0].includes(x));\r\n\r\n\r\n      for (let individualTable of table) {\r\n        for (let node of individualTable) {\r\n          var counterNumber = 0;\r\n          for (let nodes of completePaths) {\r\n            if (node == nodes) {\r\n              completePaths.splice(counterNumber, 1);\r\n            }\r\n            counterNumber++;\r\n          }\r\n        }\r\n\r\n\r\n      }\r\n\r\n      console.log('Los nodos que conforman el camino:');\r\n      console.log(table);\r\n      console.log('Los caminos despues de filtrar');\r\n      console.log(completePaths);\r\n\r\n      const normalized = Object.keys(table)\r\n        .sort((i1, i2) => +i1 - +i2)\r\n        .map(key => table[key]);\r\n      const widths = normalized.map(col =>\r\n        Math.max(...col.map(n => this.nodeSize(n).width))\r\n      );\r\n\r\n      let x = 0;\r\n\r\n\r\n\r\n      for (let [i, col] of Object.entries(normalized)) {\r\n        const heights = col.map(n => this.nodeSize(n).height);\r\n        const fullHeight = heights.reduce((a, b) => a + b + this.margin.y);\r\n\r\n        let y = 0;\r\n\r\n        x += widths[i] + this.margin.x;\r\n        console.log('Alturas');\r\n\r\n        for (let [j, n] of Object.entries(col)) {\r\n          if (j == 0) {\r\n            y += heights[j] + this.margin.y + heightOffset;\r\n          } else {\r\n            y += heights[j] + this.margin.y ;\r\n          }\r\n         \r\n          maximumHeight = Math.max(maximumHeight, y);\r\n\r\n          console.log(y);\r\n\r\n          // this.editor.view.nodes.get(n).translate(x, y - fullHeight / 2);\r\n          this.editor.view.nodes.get(n).translate(x, y );\r\n          this.editor.view.updateConnections({ node: n });\r\n        }\r\n\r\n\r\n\r\n      }\r\n\r\n      console.log('Maxima altura')\r\n      heightOffset = maximumHeight + 50;\r\n      console.log(maximumHeight);\r\n      console.log (heightOffset);\r\n    }\r\n\r\n    console.log(this.editor.nodes);\r\n\r\n    console.log('Salgo');\r\n  }\r\n}\r\n","import { AutoArrange } from './auto-arrange';\r\n\r\nfunction install(editor, { margin = { x: 50, y: 50 }, depth = null }) {\r\n    editor.bind('arrange');\r\n\r\n    const ar = new AutoArrange(editor, margin, depth);\r\n    \r\n    editor.on('arrange', ({ node }) => ar.arrange(node));\r\n\r\n    editor.arrange = node => {\r\n        console.log(`Deprecated: use editor.trigger('arrange', { node }) instead`);\r\n        ar.arrange(node);\r\n    }\r\n}\r\n\r\nexport default {\r\n    name: 'auto-arrange',\r\n    install\r\n}"],"names":["AutoArrange","editor","margin","depth","node","type","nodes","key","values","io","connections","connection","push","cols","this","includes","getNodes","map","n","_this","getNodesTable","el","view","get","width","clientWidth","height","clientHeight","completePaths","console","log","counter","maximumHeight","heightOffset","table","_this2","individualTable","counterNumber","splice","normalized","Object","keys","sort","i1","i2","widths","col","Math","max","nodeSize","x","entries","i","heights","y","reduce","a","b","j","translate","updateConnections","length","name","install","bind","ar","on","arrange"],"mappings":"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"}